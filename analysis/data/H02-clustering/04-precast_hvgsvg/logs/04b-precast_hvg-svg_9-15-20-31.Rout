
R version 4.2.1 Patched (2022-08-30 r82775) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(data.table)
> library(Biostrings)
Loading required package: BiocGenerics

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:data.table’:

    first, second

The following objects are masked from ‘package:base’:

    expand.grid, I, unname

Loading required package: IRanges

Attaching package: ‘IRanges’

The following object is masked from ‘package:data.table’:

    shift

Loading required package: XVector
Loading required package: GenomeInfoDb

Attaching package: ‘Biostrings’

The following object is masked from ‘package:base’:

    strsplit

> library(Seurat)
Attaching SeuratObject
> library(scater) # addPerCellQC
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: MatrixGenerics
Loading required package: matrixStats

Attaching package: ‘MatrixGenerics’

The following objects are masked from ‘package:matrixStats’:

    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,
    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,
    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,
    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,
    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,
    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,
    colWeightedMeans, colWeightedMedians, colWeightedSds,
    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,
    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,
    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,
    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,
    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,
    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,
    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,
    rowWeightedSds, rowWeightedVars

Loading required package: GenomicRanges
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘Biobase’

The following object is masked from ‘package:MatrixGenerics’:

    rowMedians

The following objects are masked from ‘package:matrixStats’:

    anyMissing, rowMedians


Attaching package: ‘SummarizedExperiment’

The following object is masked from ‘package:SeuratObject’:

    Assays

The following object is masked from ‘package:Seurat’:

    Assays

Loading required package: scuttle
Loading required package: ggplot2
> library(scran)
> library(PRECAST)
Loading required package: parallel
Loading required package: gtools
PRECAST :  An efficient data integration method is provided for multiple spatial transcriptomics data with non-cluster-relevant effects such as the complex batch effects. It unifies spatial factor analysis simultaneously with spatial clustering and embedding alignment, requiring only partially shared cell/domain clusters across datasets. More details can be referred to Wei Liu, et al. (2023) <doi:10.1038/s41467-023-35947-w>.   Check out our Package website (https://feiyoung.github.io/PRECAST/index.html) for a more complete description of the methods and analyses
> 
> #### Load list of 10 and 20%ile HVGs, SVGs; load list of seurat-formatted samplewise data
> #### before seurat conversion, spe colnames and rowData(colnames) were changed to spe$key to ensure unique values when rejoining
> #### before seurat conversion, coldata added under new entries 'row' and 'col' corresponding to $array_row and $array_col
> 
> feats <- readRDS("hvg_svg_sets_list.RDS")
> seulist <- readRDS("seurat_list_forprecast.RDS")
> 
> ### build table with constants (k value from among the optimized values of 9/15/20/31 and feature set to retrieve)
> 
> f <- rep(c(1:4),4)
> k <- c(rep(9,4),rep(15,4),rep(20,4),rep(31,4))
> fks <- as.data.frame(cbind(f,k))
> rm(f,k)
> 
> 
> ### pull params for task number
> 
> i <- as.numeric(Sys.getenv("SGE_TASK_ID"))
> 
> ### And using PRECAST, with more of tony's code: https://github.com/LieberInstitute/spatial_DG_lifespan/blob/main/code/EDA/01_PRECAST.R
> ### as well as Erik's code for bypassing SPARK-X and passing in other genes
> # providing a custom gene list suppresses SPARK-X.
> 
> preobj = CreatePRECASTObject(seuList=seulist,customGenelist = feats[[fks[i,1]]])
Filter spots and features from Raw count data...
 
 
CreatePRECASTObject: remove geneswith low count reads in seuList.
Filter spots and features from SVGs(HVGs) count data...
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
> 
> PRECASTObj <- AddAdjList(preobj, platform = "Visium")
Neighbors were identified for 4035 out of 4053 spots.
Neighbors were identified for 4643 out of 4650 spots.
Neighbors were identified for 4660 out of 4660 spots.
Neighbors were identified for 4953 out of 4953 spots.
Neighbors were identified for 4470 out of 4484 spots.
Neighbors were identified for 3206 out of 3244 spots.
Neighbors were identified for 3633 out of 3653 spots.
Neighbors were identified for 4519 out of 4519 spots.
> 
> ## Add a model setting in advance for a PRECASTObj object. verbose =TRUE helps outputing the information in the algorithm.
> PRECASTObj <- AddParSetting(PRECASTObj, Sigma_equal = FALSE, coreNum = 8, maxIter = 30, verbose = TRUE)
> 
> 
> PRECASTObj <- PRECAST(PRECASTObj, K = fks[i,2])
Intergrative data info.: 8 samples, 3784 genes X 34216 spots------
PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigmfitting ...
  |                                                    fitting ...
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
----Fitting PRECAST model----------------

variable initialize finish! 
predict Y and V! 
diff Energy = 9.184978 
Finish ICM step! 
iter = 2, loglik= 14155969.000000, dloglik=1.006592 
predict Y and V! 
diff Energy = 2.654791 
diff Energy = 1.552483 
diff Energy = 3.454863 
diff Energy = 3.588768 
diff Energy = 6.117557 
diff Energy = 15.480362 
diff Energy = 1.651321 
diff Energy = 16.085569 
Finish ICM step! 
iter = 3, loglik= 14395370.000000, dloglik=0.016912 
predict Y and V! 
diff Energy = 5.798961 
diff Energy = 21.544077 
diff Energy = 21.585925 
diff Energy = 40.470079 
diff Energy = 22.470451 
diff Energy = 11.894207 
diff Energy = 29.857318 
diff Energy = 36.725771 
Finish ICM step! 
iter = 4, loglik= 14496577.000000, dloglik=0.007031 
predict Y and V! 
diff Energy = 3.544566 
diff Energy = 28.333124 
diff Energy = 20.827758 
diff Energy = 53.351631 
diff Energy = 4.852149 
diff Energy = 22.704418 
diff Energy = 1.529352 
Finish ICM step! 
iter = 5, loglik= 14552458.000000, dloglik=0.003855 
predict Y and V! 
diff Energy = 9.723415 
diff Energy = 11.450476 
diff Energy = 0.916873 
diff Energy = 32.259589 
diff Energy = 1predict Y and V! 
diff Energy = 10.396800 
diff Energy = 42.936334 
diff Energy = 7.316244 
diff Energiter = 6, loglik= 14585384.000000, dloglik=0.002263 
predict Y and V! 
diff Energy = 32.940000 
diff Energy = 0.510980 
diff Energy = 7.824808 
diff Energy = 58.801979 
diff Energy = predict Y and V! 
diff Energy = 6.784939 
diff Energy = 31.207642 
diff Energy = 0.416219 
diff Energy = 53.937046 
diff Energy = 29.330777 
diff Energy = predict Y and V! 
diff Energy = 18.130600 
diff Energy = 5.017307 
diff Energy iter = 7, loglik= 6009483.000000, dloglik=0.002881 
predict Y and V! 
diff Energy = 30.449167 
diff Energy = 39.771755 
diff Energy = 17.439124 
diff Energy = 25.465800 
diff Energy = 29.020154 
diff Energypredict Y and V! 
diff Energy = 12.869286 
diff Energy = 0.739758 
diff Energy = 7iter = 8, loglik= 6021192.500000, dloglik=0.001949 
predict Y and V! 
diff Energy = 11.668849 
diff Energy = 21.788379 
diff Energy = 5.923751 
diff Energy = 32.892486 
diff Energy = 17.825015 
diff Energy = 7.866664 
diff Energy = 8.264403 
diff Energy = 16.093496 
Finish ICM step! 
iter = 9, loglik= 6029586.500000, dloglik=0.001394 
predict Y and V! 
diff Energy = 21.174550 
diff Energy = 28.875378 
diff Energy = 0.607896 
diff Energy = 25.090501 
diff Energy = 9.309497 
diff Energy = 4.230627 
diff Energy = 18.911023 
diff Energy = 28.280417 
Finish ICM step! 
iter = 10, loglik= 6035778.500000, dloglik=0.001027 
predict Y and V! 
diff Energy = 9.019965 
 0.368323 
diff Energy = 4.461641 
Finish ICM step! 
iter = 11, loglik= 14638670.000000, dloglik=0.000316 
predict Y and V! 
diff Energy = 27.489875 
diff Energy = 14.811526 
diff Energy = 0.437158 
diff Energy = 8.097269 
diff Energy = 11.413526 
diff Energy = 12.957779 
diff Energy = 2.093568 
Finish ICM step! 
iter = 12, loglik= 14642281.000000, dloglik=0.000247 
predict Y and V! 
diff Energy = 14.930693 
diff Energy = 0.100648 
diff Energy = 4.183248 
diff Energy = 4.488052 
diff Energy = 6.872692 
diff Energy = 4.052684 
diff Energy = 2.403688 
Finish ICM step! 
iter = 13, loglik= 14645122.000000, dloglik=0.000194 
predict Y and V! 
diff Energy = 9.536181 
diff Energy = 10.176314 
diff Energy = 2.348989 
diff Energy = 11.323593 
diff Energy = 1.163097 
diff Energy = 3.396523 
diff Energy = 0.544597 
Finish ICM step! 
iter = 14, loglik= 14647339.000000, dloglik=0.000151 
predict Y and V! 
diff Energy = 9.016254 
diff Energy = 1.462449 
diff Energy = 1.383273 
diff Energy = 11.183141 
diff Energy = 8.202053 
diff Energy = 0.991986 
diff Energy = 10.782280 
Finish ICM step! 
iter = 15, loglik= 14649190.000000, dloglik=0.000126 
predict Y and V! 
diff Energy = 4.318011 
diff Energy = 2.661932 
diff Energy = 18.425889 
diff Energy = 4.639419 
diff Energy = 5.914068 
diff Energy = 4.961277 
diff Energy = 2.727211 
Finish ICM step! 
iter = 16, loglik= 14650695.000000, dloglik=0.000103 
predict Y and V! 
diff Energy = 18.307872 
diff Energy = 0.130421 
diff Energy = 0.475409 
diff Energy = 6.329656 
diff Energy = 9.085241 
diff Energy = 3.762333 
diff Energy = 5.100468 
Finish ICM step! 
iter = 17, loglik= 14651932.000000, dloglik=0.000084 
predict Y and V! 
diff Energy = 11.385039 
diff Energy = 0.528083 
diff Energy = 0.022764 
diff Energy = 8.369406 
diff Energy = 4.319639 
diff Energy = 6.668054 
diff Energy = 10.047251 
Finish ICM step! 
iter = 18, loglik= 14652970.000000, dloglik=0.000071 
predict Y and V! 
diff Energy = 21.770887 
diff Energy = 3.425335 
diff Energy = 1.187720 
diff Energy = 19.687025 
diff Energy = 3.179695 
diff Energy = 0.298722 
diff Energy = 1.219160 
diff Energy = 2.184124 
Finish ICM step! 
iter = 19, loglik= 14653862.000000, dloglik=0.000061 
predict Y and V! 
diff Energy = 21.727406 
diff Energy = 0.685172 
diff Energy = 13.073972 
diff Energy = 1.882942 
diff Energy = 10.345143 
diff Energy = 2.403333 
Finish ICM step! 
iter = 20, loglik= 14654682.000000, dloglik=0.000056 
predict Y and V! 
diff Energy = 17.350552 
diff Energy = 1.291532 
diff Energy = 4.332843 
diff Energy = 22.284487 
diff Energy = 7.527437 
diff Energy = 5.687597 
diff Energy = 2.042770 
Finish ICM step! 
iter = 21, loglik= 14655333.000000, dloglik=0.000044 
predict Y and V! 
diff Energy = 18.530565 
diff Energy = 0.667325 
diff Energy = 3.517090 
diff Energy = 5.237288 
diff Energy = 3.878290 
diff Energy = 0.550733 
diff Energy = 1.730868 
Finish ICM step! 
iter = 22, loglik= 14655925.000000, dloglik=0.000040 
predict Y and V! 
diff Energy = 4.261772 
diff Energy = 0.57predict Y and V! 
diff Energy = 2.876982 
diff Energy = 16.677318 
diff Energy = 3.620733 
diff Energy = 10.660017 
diff Energy = 9.597120 
diff Energy = 4.790849 
diff Energy = 0.053057 
diff Energy = 20.809751 
Finish ICM step! 
iter = 22, loglik= 6059883.000000, dloglik=0.000121 
predict Y and V! 
diff Energy = 22.704271 
diff Energy = 0.560526 
diff Energy = 11.546445 
diff Energy = 13.999375 
diff Energy = 11.809913 
diff Energy = 3.457916 
diff Energy = 19.454230 
Finish ICM step! 
iter = 23, loglik= 6060580.000000, dloglik=0.000115 
predict Y and V! 
diff Energy = 13.859311 
diff Energy = 1.386914 
diff Energy = 15.835102 
diff Energy = 14.464971 
diff Energy = 4.980039 
diff Energy = 2.675191 
diff Energy = 20.721508 
Finish ICM step! 
iter = 24, loglik= 6061154.500000, dloglik=0.000095 
predict Y and V! 
diff Energy = 0.960347 
diff Energy = 20.859637 
diff Energy = 0.203340 
diff Energy = 8.497483 
diff Energy = 6.673536 
diff Energy = 2.482969 
diff Energy = 15.868454 
Finish ICM step! 
iter = 25, loglik= 6061766.000000, dloglik=0.000101 
predict Y and V! 
diff Energy = 16.403645 
diff Energy = 12.922415 
diff Energy = 1.849892 
diff Energy = 10.575658 
diff Energy = 14.565050 
diff Energy = 0.460874 
diff Energy = 0.135428 
Finish ICM step! 
iter = 26, loglik= 6062212.500000, dloglik=0.000074 
predict Y and V! 
diff Energy = 2.098792 
diff Energy = 7.136814 
diff Energy = 2.176530 
diff Energy = 11.942616 
diff Energy = 16.031529 
diff Energy = 1.628556 
diff Energy = 21.933192 
diff Energy = 9.049753 
Finish ICM step! 
iter = 27, loglik= 6062708.000000, dloglik=0.000082 
predict Y and V! 
diff Energy = 1.027586 
diff Energy = 6.849714 
diff Energy = 1.619860 
diff Energy = 6.688543 
diff Energy = 11.356278 
diff Energy = 11.903422 
Finish ICM step! 
iter = 28, loglik= 6063229.000000, dloglik=0.000086 
predict Y and V! 
diff Energy = 1.935840 
diff Energy = 6.750670 
diff Energy = 0.422362 
diff Energy = 15.905269 
diff Energy = 10.875448 
diff Energy = 1.091864 
diff Energy = 1.286148 
diff Energy = 11.302762 
Finish ICM step! 
iter = 29, loglik= 6063629.000000, dloglik=0.000066 
predict Y and V! 
diff Energy = 8.693908 
diff Energy = 6.703539 
diff Energy = 16.708666 
diff Energy = 4.338914 
diff Energy = 1.663312 
diff Energy = 2.714560 
Finish ICM step! 
iter = 30, loglik= 6063993.000000, dloglik=0.000060 
> 
> saveRDS(PRECASTObj,paste0("precast_hvg-svg_out/",names(feats)[fks[i,1]],"_k",fks[i,2],"_precast_clusts.RDS"))
> 
> session.info()
Error in session.info() : could not find function "session.info"
Execution halted
